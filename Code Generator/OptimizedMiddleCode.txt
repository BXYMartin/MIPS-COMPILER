FUNC int sqrt()
PARA int x
#0 = x * x
RET id #0
FUNC void arrange()
PARA int unuse0
PARA int unuse1
PARA int unuse2
PARA int unuse3
PARA int level
i = 0 + 0
BNZ level n $Label1
RET
LABEL $Label1
LABEL $Label2
LABEL $Label3
#0 = mark[i]
BNZ #0 0 $Label4
mark[i] = 1 + 0
data[level] = i + 0
#0 = level + 1
PUSH 0
PUSH 0
PUSH 0
PUSH 0
PUSH #0
CALL arrange
mark[i] = 0 + 0
LABEL $Label4
LABEL $Label5
i = i + 1
BLZ i n $Label3
RET
FUNC void foo_recursion()
_i = 0 + 0
PRT string "Full permutation, please input a number(<100)"
ENTER
READ int n
LABEL $Label6
mark[_i] = 0 + 0
_i = _i + 1
BLZ _i n $Label6
PUSH 1
PUSH 2
PUSH 3
PUSH 4
PUSH 0
CALL arrange
PRT string "Finished!"
ENTER
RET
FUNC int foo_expr()
i = 0 + 0
PRT string "Three integers"
ENTER
READ int a
READ int c
READ int d
LABEL $Label7
data[i] = i + 0
i = i + 1
BLZ i 100 $Label7
#0 = data[c]
PUSH d
CALL sqrt
#1 = Ret + 0
#2 = a * #0
#3 = 0 - #2
#4 = #3 + -198
#5 = #4 + #1
#6 = #5 - 2
RET id #6
FUNC void do_nothing()
RET
FUNC void value()
READ int op
BEZ op 1 $Label9
BEZ op 2 $Label10
PRT int 98
ENTER
JMP $Label8
LABEL $Label9
PRT int 110
ENTER
JMP $Label8
LABEL $Label10
PRT char 'b'
ENTER
JMP $Label8
LABEL $Label8
RET
FUNC void main()
READ char op
LABEL $Label12
#0 = -1 + 0
BEZ #0 0 $Label13
BEZ op 101 $Label16
BEZ op 114 $Label17
BEZ op 110 $Label18
BEZ op 118 $Label19
PRT string "Please input e/r/n/v instead of "
PRT id op
ENTER
JMP $Label15
LABEL $Label16
CALL foo_expr
#0 = Ret + 0
PRT id #0
ENTER
JMP $Label15
LABEL $Label17
CALL foo_recursion
JMP $Label15
LABEL $Label18
CALL do_nothing
JMP $Label15
LABEL $Label19
CALL value
JMP $Label15
LABEL $Label15
LABEL $Label13
LABEL $Label14
#0 = 0 + 0
BNZ #0 0 $Label12
EXIT
